from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
import database as db

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞. –í —ç—Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ '
                         '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç /start. –ù–∞–∂–º–∏—Ç–µ –Ω–∞—á–∞—Ç—å', reply_markup=kb.main)


@router.callback_query(lambda callback_query: any(callback_query.data == clb for clb in ['start', 'back']))
async def start(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è:', reply_markup=await kb.inline_names())


@router.callback_query(lambda callback_query: callback_query.data.startswith('name_'))
async def show_marks(query: CallbackQuery):
    i = int(query.data.split('_')[1])
    await query.message.edit_text(f'{db.names[i]}, –æ—Ü–µ–Ω–∫–∏:\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫üá¨üáß\n {str(db.marks[0][i])[1:-1]} | '
                                  f'{round(sum(db.marks[0][i]) / len(db.marks[0][i]), 2)}\n'
                                  f'–ë–∏–æ–ª–æ–≥–∏—èüå±\n {str(db.marks[1][i])[1:-1]} | '
                                  f'{round(sum(db.marks[1][i]) / len(db.marks[1][i]), 2)}\n'
                                  f'–ì–µ–æ–≥—Ä–∞—Ñ–∏—èüåç\n {str(db.marks[2][i])[1:-1]} | '
                                  f'{round(sum(db.marks[2][i]) / len(db.marks[2][i]), 2)}\n'
                                  f'–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üíª\n {str(db.marks[3][i])[1:-1]} | '
                                  f'{round(sum(db.marks[3][i]) / len(db.marks[3][i]), 2)}\n'
                                  f'–ò—Å—Ç–æ—Ä–∏—èüèõÔ∏è\n {str(db.marks[4][i])[1:-1]} | '
                                  f'{round(sum(db.marks[4][i]) / len(db.marks[4][i]), 2)}\n'
                                  f'–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞üìö\n {str(db.marks[5][i])[1:-1]} | '
                                  f'{round(sum(db.marks[5][i]) / len(db.marks[5][i]), 2)}\n'
                                  f'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìè\n {str(db.marks[6][i])[1:-1]} | '
                                  f'{round(sum(db.marks[6][i]) / len(db.marks[6][i]), 2)}\n'
                                  f'–†—É—Å—Å–∫–∏–π —è–∑—ã–∫üìù\n {str(db.marks[7][i])[1:-1]} | '
                                  f'{round(sum(db.marks[7][i]) / len(db.marks[7][i]), 2)}\n'
                                  f'–§–∏–∑–∏–∫–∞üåå\n {str(db.marks[8][i])[1:-1]} | '
                                  f'{round(sum(db.marks[8][i]) / len(db.marks[8][i]), 2)}\n'
                                  f'–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞üèä‚Äç‚ôÇÔ∏è\n {str(db.marks[9][i])[1:-1]} | '
                                  f'{round(sum(db.marks[9][i]) / len(db.marks[9][i]), 2)}\n'
                                  f'–•–∏–º–∏—è‚öóÔ∏è\n {str(db.marks[10][i])[1:-1]} | '
                                  f'{round(sum(db.marks[10][i]) / len(db.marks[10][i]), 2)}\n'
                                  f'–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µüìä\n {str(db.marks[11][i])[1:-1]} | '
                                  f'{round(sum(db.marks[11][i]) / len(db.marks[11][i]), 2)}\n', reply_markup=kb.go_back)


